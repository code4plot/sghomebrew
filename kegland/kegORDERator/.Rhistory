rep(c("treatment","control"),each = 10)
rnorm(10,runif(1,1,100), sd = runif(1,0.5,2))
group = c()
t = c()
res = c()
biom = c()
biomarker = c("a","b","c","d")
for(i in biomarker){
for(n in seq(0,5)){
#treat
res = append(res,rnorm(10,runif(1,1,100), sd = runif(1,0.5,2)))
#control
res = append(res,rnorm(10,runif(1,1,100), sd = runif(1,0.5,2)))
group = append(group,rep(c("treatment","control"),each = 10))
t = append(t,rep(as.character(n),20))
biom = append(biom,rep(i),20)
}
}
df <- data.frame(biom = biom, group = group, time = t, readout = res)
biom
res
group = c()
t = c()
res = c()
biom = c()
biomarker = c("a","b","c","d")
for(i in biomarker){
for(n in seq(0,5)){
#treat
res = append(res,rnorm(10,runif(1,1,100), sd = runif(1,0.5,2)))
#control
res = append(res,rnorm(10,runif(1,1,100), sd = runif(1,0.5,2)))
group = append(group,rep(c("treatment","control"),each = 10))
t = append(t,rep(as.character(n),20))
biom = append(biom,rep(i,20))
}
}
df <- data.frame(biom = biom, group = group, time = t, readout = res)
df
subset(df,biom == "a")
subdf <- subset(df, biom == "a")
fit <- lm(readout ~ group*time, data = subdf)
summary(fit)
for(i in biomarker){
subdf <- subset(df, biom == i)
fit <- lm(readout ~ group*time, data = subdf)
summary(fit)
}
for(i in biomarker){
subdf <- subset(df, biom == i)
fit <- lm(readout ~ group*time, data = subdf)
print(summary(fit))
}
group = c()
t = c()
res = c()
biom = c()
biomarker = c("a","b","c","d")
for(i in biomarker){
for(n in seq(0,5)){
#treat
res = append(res,rnorm(10,runif(1,50,60), sd = runif(1,0.5,2)))
#control
res = append(res,rnorm(10,runif(1,50,60), sd = runif(1,0.5,2)))
group = append(group,rep(c("treatment","control"),each = 10))
t = append(t,rep(as.character(n),20))
biom = append(biom,rep(i,20))
}
}
df <- data.frame(biom = biom, group = group, time = t, readout = res)
for(i in biomarker){
subdf <- subset(df, biom == i)
fit <- lm(readout ~ group*time, data = subdf)
print(summary(fit))
}
library(ggplot2)
s = ggplot(subdf,aes(x = time, y = readout, color = group)) +
geom_line()
s
s = ggplot(subdf,aes(x = time, y = readout, group = group)) +
geom_line()
s
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = 1)) +
geom_line()
s
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = 0)) +
geom_line()
s
s = ggplot(subdf,aes(x = time, y = readout, color = group)) +
geom_line()
s
s = ggplot(subdf,aes(x = as.numeric(time), y = readout, color = group)) +
geom_line()
s
s = ggplot(subdf,aes(x = as.numeric(time), y = readout, color = group, group = 1)) +
geom_line()
s
s = ggplot(subdf,aes(x = as.numeric(time), y = readout, color = group)) +
geom_line()
s
subdf$time
s = ggplot(subdf,aes(x = as.numeric(time), y = readout, color = group, group = group)) +
geom_line()
s
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_line()
s
subdf
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_point()
s
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_point() +
geom_smooth()
s
group = c()
t = c()
res = c()
biom = c()
biomarker = c("a","b","c","d")
for(i in biomarker){
for(n in seq(0,5)){
#treat
res = append(res,rnorm(10,runif(1,50,51), sd = runif(1,0.5,2)))
#control
res = append(res,rnorm(10,runif(1,50,51), sd = runif(1,0.5,2)))
group = append(group,rep(c("treatment","control"),each = 10))
t = append(t,rep(as.character(n),20))
biom = append(biom,rep(i,20))
}
}
df <- data.frame(biom = biom, group = group, time = t, readout = res)
for(i in biomarker){
subdf <- subset(df, biom == i)
fit <- lm(readout ~ group*time, data = subdf)
print(summary(fit))
}
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_point() +
geom_smooth()
s
nrow(subdf)
group = c()
t = c()
res = c()
biom = c()
biomarker = c("a","b","c","d")
for(i in biomarker){
for(n in seq(0,5)){
#treat
res = append(res,rnorm(10,runif(1,50,55), sd = runif(1,0.5,2)))
#control
res = append(res,rnorm(10,runif(1,50,51), sd = runif(1,0.5,2)))
group = append(group,rep(c("treatment","control"),each = 10))
t = append(t,rep(as.character(n),20))
biom = append(biom,rep(i,20))
}
}
df <- data.frame(biom = biom, group = group, time = t, readout = res)
for(i in biomarker){
subdf <- subset(df, biom == i)
fit <- lm(readout ~ group*time, data = subdf)
print(summary(fit))
}
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_point() +
geom_smooth()
s
subdf <- subset(df, biom == "a")
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_point() +
geom_smooth()
s
subdf <- subset(df, biom == "b")
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_point() +
geom_smooth()
s
fit <- lm(readout ~ group:time, data = subdf)
print(summary(fit))
?lm
rnorm(100)
a <- rnorm(100)
hist(a)
plotNorm <- function(..){}
plotNorm <- function(..){
a <- rnorm(..)
hist(a)
}
plotNorm(100)
plotNorm(100,10,1)
plotNorm(n=100, mean = 1, sd = 1)
plotNorm <- function(...){
a <- rnorm(...)
hist(a)
}
plotNorm(n=100, mean = 1, sd = 1)
library(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
install.packages('gplots')
install.packages('fgsea')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
knitr::opts_knit$set(root.dir = paste(getwd(),"deg", sep = "/"))
library(tidyverse)
library(gplots)
library(RColorBrewer)
library(fgsea)
library(speed2)
install.packages('speed2')
library(devtools)
install_github("molsysbio/speed2")
library(devtools)
install_github("molsysbio/speed2")
?install_github
lib
install.packages("utf8")
devtools::install_github("daattali/shinyforms")
shiny::runApp('D:/plot/sghomebrew/kegland/kegORDERator')
runApp('D:/plot/sghomebrew/kegland/kegORDERator')
?shiyforms
?shinyforms
runApp('D:/plot/sghomebrew/kegland/kegORDERator')
tmp <- list.files("responses","*.csv")
tmp
setwd("D:/plot/sghomebrew/kegland/kegORDERator")
tmp <- list.files("responses","*.csv")
tmp
tmp <- list.files("responses","*.csv", full.names = T)
tmp
lapply(tmp, read.csv)
dplyr::bind_rows(lapply(tmp, read.csv))
runApp()
runApp()
?switch
source("utils/order.R")
runApp()
runApp()
sprintf("asd%s","hi")
runApp()
usercsvList <- list.files("responses", "*.csv", full.names = T)
users <- dplyr::bind_rows(lapply(usercsvList, read.csv))
users
users$name
runApp()
runApp()
?conditionalPanel
runApp()
runApp()
tmp <- read.csv("../pricelist201021.csv", header = T, stringsAsFactors = F)
head(tmp)
tmp <- dplyr::filter(tmp, grepl("^(Kegerator|Brewzilla)", Product.Name))
head(tmp)
write.csv(tmp, "tables/priceList_test.csv", row.names = F)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
digest
?digest
?sapply
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
write.table
?write.table
runApp()
?write.table
?file.exists
runApp()
iris
iris %>% group_by(Species) %>% summarise(sum)
library(tidyverse)
iris %>% group_by(Species) %>% summarise(sum)
iris %>% group_by(Species) %>% summarise(mean)
iris %>% group_by(Species)
dplyr::summarise(iris, avg = mean(Sepal.Length))
?aggregate
iris %>% group_by(Species) %>% summarise(q = sum(Sepal.Length))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?group_by
runApp()
as.numeric("a")
as.numeric("a") == NA
as.numeric("a") == "NA"
as.numeric("a")
a=as.numeric("a")
a
a == "NA"
is.na(a)
is.na(as.numeric("a"))
runApp()
runApp()
runApp()
!is.na(as.numeric("a"))
!is.na(as.numeric("1"))
runApp()
fields_order <- c("name", "klid", "q")
list("name" = "Test", "klid" = "KL00", "q" = 1)
test <-list("name" = "Test", "klid" = "KL00", "q" = 1)
sapply(fields_order, function(x) test[[x]])
a <- sapply(fields_order, function(x) test[[x]])
is.vector(a)
data_frame(a)
tibble(a)
tibble(t(a))
tibble(test)
?tibble
tibble_row(test)
tibble(a)
as.vector(test)
sapply(fields_order, function(x) tibble(test[[x]]))
lapply(fields_order, function(x) tibble(test[[x]]))
sapply(fields_order, function(x) test[[x]])
names(sapply(fields_order, function(x) test[[x]]))
a
t(a)
tibble(t(a))
b <- t(a)
tibble(b)
tibble_row(b)
as_tibble(test)
runApp()
test
as_tibble(a)
a
as_tibble(b)
runApp()
lapply(fields_order, function(x) test[[x]])
as_tibble(lapply(fields_order, function(x) test[[x]]))
sapply(fields_order, function(x) test[[x]])
test[[fields_order]]
sapply(test, "[", fields_order)
test[[which(names(test) %in% fields_order)]]
test[fields_order]
runApp()
sapply(fields_order, function(x) test[[x]])
list(sapply(fields_order, function(x) test[[x]]))
bind_rows(sapply(fields_order, function(x) test[[x]]))
runApp()
runApp()
read.csv("tables/orders.csv")
read.csv("tables/orders.csv")$q
is.numeric(read.csv("tables/orders.csv")$q)
runApp()
test
test$q
is.numeric(test$q)
a
a$q = as.numeric(a$q)
a[3]
a[3] = as.numeric(a[3])
a
sapply(fields_order, function(x) bind_cols(test[[x]]))
a[3]
bind_rows(a)
runApp()
runApp()
runApp()
runApp()
runApp()
file.exists("order")
file.exists("order/asl.csv")
file.exists("responses")
file.create("testing")
dir.create("responses")
file.create("testing/test.csv")
head(iris)
dplyr::transmute(iris, test = (Sepal.Length > 5) + (Sepal.Width > 3))
dplyr::transmute(iris, test = (Sepal.Length > 5 & Sepal.Width > 3))
dplyr::transmute(iris, test = (Sepal.Length > 5 & Sepal.Width > 3) * 3)
dplyr::transmute(iris, test = (Sepal.Length > 5 & Sepal.Width > 3) * "a")
?as.matrix
matrix(c(1,0,0))
matrix(c(1,0,0), ncol = 3)
a = matrix(c(1,0,0), ncol = 3)
b = matrix(c(10,20,30), nrow = 3)
a %*% b
as.numeric(a %*% b)
get(...)
a <- function(...){}
a <- function(...){print(get(...))}
a("a",1)
a <- function(..){print(get(..))}
a("a")
a <- function(...){print(get("..."))}
a("a")
a <- function(...){sort(...)}
a(2,1,3)
sort(c(2,1,3))
rank(c(2,1,3))
rank(c(1,1,3))
?rank
rank(c(1,1,3), ties.method = "first")
head(priceList)
head(as_tibble(priceList))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- read_csv("tables/priceList_test.csv")
colnames(a)
colnames(a) = c("klid","klname","Units.Per.Outter.Carton.Bag",
"mediumqty","largeqty","largeprice","mediumprice","smallprice")
parse_double(a$largeprice)
parse_number(a$largeprice)
dplyr::select(a, matches("*price"))
dplyr::parse_number(select(a, matches("*price")))
parse_number(dplyr::select(a, matches("*price")))
dplyr::mutate(a, largeprice = parse_number(largeprice))
head(a)
head(a, n=10)
?parse_number
parse_number(123.80)
parse_number("123.80")
dplyr::transmute(a, largeprice = parse_number(largeprice))
dplyr::filter(transmute(a, largeprice = parse_number(largeprice)), largeprice > 1000
)
dplyr::filter(transmute(a, largeprice = parse_number(largeprice)), largeprice > 1000)
runApp()
?Vectorize
runApp()
runApp()
?parse_number
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dir
dirName
runApp()
?read_csv
read_csv("orders/testname.csv")
get_csvs <- function(dirName){
csvList <- list.files(dirName, "*.csv", full.names = T)
csvs <- dplyr::bind_rows(lapply(csvList, read_csv))
return(csvs)
}
get_csvs("orders")
?write_csv
?bind_rows
runApp()
runApp()
runApp()
runApp()
tmp
length(tmp)
nrows(tmp)
nrow(tmp)
shape(tmp)
dim(tmp)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as_tibble(sapply(letters[1:3], function(x) character()))
as_tibble(sapply(c("1","2"), function(x) character()))
runApp()
