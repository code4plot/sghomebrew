s = ggplot(subdf,aes(x = time, y = readout, color = group)) +
geom_line()
s
s = ggplot(subdf,aes(x = as.numeric(time), y = readout, color = group)) +
geom_line()
s
s = ggplot(subdf,aes(x = as.numeric(time), y = readout, color = group, group = 1)) +
geom_line()
s
s = ggplot(subdf,aes(x = as.numeric(time), y = readout, color = group)) +
geom_line()
s
subdf$time
s = ggplot(subdf,aes(x = as.numeric(time), y = readout, color = group, group = group)) +
geom_line()
s
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_line()
s
subdf
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_point()
s
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_point() +
geom_smooth()
s
group = c()
t = c()
res = c()
biom = c()
biomarker = c("a","b","c","d")
for(i in biomarker){
for(n in seq(0,5)){
#treat
res = append(res,rnorm(10,runif(1,50,51), sd = runif(1,0.5,2)))
#control
res = append(res,rnorm(10,runif(1,50,51), sd = runif(1,0.5,2)))
group = append(group,rep(c("treatment","control"),each = 10))
t = append(t,rep(as.character(n),20))
biom = append(biom,rep(i,20))
}
}
df <- data.frame(biom = biom, group = group, time = t, readout = res)
for(i in biomarker){
subdf <- subset(df, biom == i)
fit <- lm(readout ~ group*time, data = subdf)
print(summary(fit))
}
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_point() +
geom_smooth()
s
nrow(subdf)
group = c()
t = c()
res = c()
biom = c()
biomarker = c("a","b","c","d")
for(i in biomarker){
for(n in seq(0,5)){
#treat
res = append(res,rnorm(10,runif(1,50,55), sd = runif(1,0.5,2)))
#control
res = append(res,rnorm(10,runif(1,50,51), sd = runif(1,0.5,2)))
group = append(group,rep(c("treatment","control"),each = 10))
t = append(t,rep(as.character(n),20))
biom = append(biom,rep(i,20))
}
}
df <- data.frame(biom = biom, group = group, time = t, readout = res)
for(i in biomarker){
subdf <- subset(df, biom == i)
fit <- lm(readout ~ group*time, data = subdf)
print(summary(fit))
}
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_point() +
geom_smooth()
s
subdf <- subset(df, biom == "a")
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_point() +
geom_smooth()
s
subdf <- subset(df, biom == "b")
s = ggplot(subdf,aes(x = time, y = readout, color = group, group = group)) +
geom_point() +
geom_smooth()
s
fit <- lm(readout ~ group:time, data = subdf)
print(summary(fit))
?lm
rnorm(100)
a <- rnorm(100)
hist(a)
plotNorm <- function(..){}
plotNorm <- function(..){
a <- rnorm(..)
hist(a)
}
plotNorm(100)
plotNorm(100,10,1)
plotNorm(n=100, mean = 1, sd = 1)
plotNorm <- function(...){
a <- rnorm(...)
hist(a)
}
plotNorm(n=100, mean = 1, sd = 1)
library(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
install.packages('gplots')
install.packages('fgsea')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
knitr::opts_knit$set(root.dir = paste(getwd(),"deg", sep = "/"))
library(tidyverse)
library(gplots)
library(RColorBrewer)
library(fgsea)
library(speed2)
install.packages('speed2')
library(devtools)
install_github("molsysbio/speed2")
library(devtools)
install_github("molsysbio/speed2")
?install_github
lib
setwd("D:/github/sghomebrew/kegland/kegORDERator")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
uid = "kegland"
pwd = "xAC0QGoCfk6qMRuWhUyz"
port = 3306
dbname = "kegorderator"
db_cred <- list(
"host" = "homebrewsg-kegland.cm0lezxudqaz.ap-southeast-1.rds.amazonaws.com",
"port" = 3306,
"user" = kegland,
"password" = "xAC0QGoCfk6qMRuWhUyz"
)
db_cred <- list(
"host" = "homebrewsg-kegland.cm0lezxudqaz.ap-southeast-1.rds.amazonaws.com",
"port" = 3306,
"user" = "kegland",
"password" = "xAC0QGoCfk6qMRuWhUyz"
)
saveRDS(db_cred, "credentials/db_cred.RDS")
install.packages("RMySQL")
options(mysql = db_cred)
names(options)
names(options())
db_options(mysql = db_cred)
colnames(priceList)
paste(colnames(priceList), collapse = ", "
)
paste(head(priceList), collapse = ", ")
priceList
priceList <- read_csv("tables/priceList_test.csv")
colnames(priceList) <- c("klid","klname","Units.Per.Outter.Carton.Bag",
"mediumqty","largeqty","largeprice","mediumprice","smallprice")
priceList <- dplyr::mutate(priceList, largeprice = parse_number(largeprice),
mediumprice = parse_number(mediumprice),
smallprice = parse_number(smallprice))
priceList
names(priceList)
paste(head(priceList), collapse = ", ")
query_orders <- "CREATE TABLE orders
(
id INT AUTO_INCREMENT PRIMARY KEY,
ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
name varchar(90) NOT NULL,
klid varchar(10) NOT NULL,
q INT NOT NULL
)
"
query_orders
library(RMySQL)
source("utils/parameters.R")
source("utils/data_handler.R")
options(mysql = db_cred)
db <- db_connect()
query_orders <- "CREATE TABLE orders
(
id INT AUTO_INCREMENT PRIMARY KEY,
ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
name varchar(90) NOT NULL,
klid varchar(10) NOT NULL,
q INT NOT NULL
)
"
dbGetQuery(db, query_orders)
query_users <- "CREATE TABLE orders
(
id INT AUTO_INCREMENT PRIMARY KEY,
ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
uname varchar(90) NOT NULL,
paynow INT NOT NULL
)
"
dbGetQuery(db, query_users)
query_users <- "CREATE TABLE users
(
id INT AUTO_INCREMENT PRIMARY KEY,
ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
uname varchar(90) NOT NULL,
paynow INT NOT NULL
)
"
dbGetQuery(db, query_users)
dbDisconnect(db)
library(RMySQL)
source("utils/parameters.R")
options(mysql = db_cred)
db_connect <- function(){
db <- dbConnect(MySQL(),
dbname = databaseName,
host = options()$mysql$host,
port = options()$mysql$port,
user = options()$mysql$user,
password = options()$mysql$password
)
return(db)
}
saveData <- function(data, tbl){
db <- db_connect()
query <- sprintf(
"INSERT INTO %s (%s) VALUES ('%s')",
tbl,
paste(names(data), collapse = ", "),
paste(data, collapse = ", ")
)
dbGetQuery(db, query)
dbDisconnect(db)
}
loadUsers <- function(tbl = table_users){
db <- db_connect()
query <- sprintf("SELECT uname FROM %s",
tbl)
data <- dbGetQuery(db, query)
dbDisconnect(db)
return(data)
}
loadOrders <- function(tbl = table_orders, name){
db <- db_connect()
query <- sprintf("SELECT name, klid, SUM(q) as q FROM %s
WHERE name = %s
GROUP BY klid", tbl, name)
data <- dbGetQuery(db, query)
dbDisconnect(db)
return(data)
}
loadAllOrders <- function(tbl = table_orders){
db <- db_connect()
query <- sprintf("SELECT b.klid, SUM(b.q) as q FROM
(SELECT a.name, a.klid, SUM(a.q) as q FROM %s AS a
GROUP BY a.name, a.klid) AS b
WHERE b.q > 0
GROUP BY b.klid")
data <- dbGetQuery(db, query)
dbDisconnect(db)
return(data)
}
testOrder <- read_csv("tables/orders.csv")
testOrder
saveData(testOrder, "orders")
names(testOrder)
saveData <- function(data, tbl){
db <- db_connect()
query <- sprintf(
"INSERT INTO %s ('%s') VALUES ('%s')",
tbl,
paste(names(data), collapse = ", "),
paste(data, collapse = ", ")
)
dbGetQuery(db, query)
dbDisconnect(db)
}
saveData(testOrder, "orders")
sprintf("('%s') VALUES ('%s')", paste(names(testOrder), collapse = ", "), paste(data, collapse = ", "))
sprintf("(%s) VALUES ('%s')", paste(names(testOrder), collapse = ", "), paste(data, collapse = ", "))
sprintf("('%s') VALUES (%s)", paste(names(testOrder), collapse = ", "), paste(data, collapse = ", "))
sprintf("(%s) VALUES (%s)", paste(names(testOrder), collapse = ", "), paste(data, collapse = ", "))
sprintf("('%s') VALUES ('%s')", paste(names(testOrder), collapse = ", "), paste(testOrder, collapse = ", "))
sprintf("(%s) VALUES (%s)", paste(names(testOrder), collapse = ", "), paste(testOrder, collapse = ", "))
sprintf("(%s) VALUES (%s)", paste(names(testOrder), collapse = ", "), paste(testOrder[1,], collapse = ", "))
for(i in 1:nrow(testOrder)){}
saveData <- function(data, tbl){
db <- db_connect()
query <- sprintf(
"INSERT INTO %s (%s) VALUES ('%s')",
tbl,
paste(names(data), collapse = ", "),
paste(data, collapse = ", ")
)
dbGetQuery(db, query)
dbDisconnect(db)
}
for(i in 1:nrow(testOrder)){
saveData(testOrder[i,],"orders")
}
saveData(testOrder[i,], "orders")
saveData <- function(data, tbl){
db <- db_connect()
query <- sprintf(
"INSERT INTO %s ('%s') VALUES ('%s')",
tbl,
paste(names(data), collapse = ", "),
paste(data, collapse = ", ")
)
dbGetQuery(db, query)
dbDisconnect(db)
}
for(i in 1:nrow(testOrder)){
saveData(testOrder[i,],"orders")
}
saveData <- function(data, tbl){
db <- db_connect()
query <- sprintf(
"INSERT INTO %s (%s) VALUES (%s)",
tbl,
paste(names(data), collapse = ", "),
paste(data, collapse = ", ")
)
dbGetQuery(db, query)
dbDisconnect(db)
}
for(i in 1:nrow(testOrder)){
saveData(testOrder[i,],"orders")
}
testOrder[1,]
names(testOrder[1,])
saveData <- function(data, tbl){
db <- db_connect()
query <- sprintf(
"INSERT INTO %s (%s) VALUES ('%s')",
tbl,
paste(names(data), collapse = ", "),
paste(data, collapse = "', '")
)
dbGetQuery(db, query)
dbDisconnect(db)
}
for(i in 1:nrow(testOrder)){
saveData(testOrder[i,],"orders")
}
db <- db_connect()
query_orders <- "CREATE TABLE orders
(
id INT AUTO_INCREMENT PRIMARY KEY,
ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
name varchar(90) NOT NULL,
klid varchar(10) NOT NULL,
q INT NOT NULL
)
"
dbGetQuery(db, query_orders)
dbDisconnect(db)
for(i in 1:nrow(testOrder)){
saveData(testOrder[i,],"orders")
}
loadOrders("orders","Jason")
loadOrders <- function(tbl = table_orders, name){
db <- db_connect()
query <- sprintf("SELECT name, klid, SUM(q) as q FROM %s
WHERE name = '%s'
GROUP BY klid", tbl, name)
data <- dbGetQuery(db, query)
dbDisconnect(db)
return(data)
}
loadOrders("orders", "Jason)
loadOrders("orders", "Jason")
loadOrders("orders", "Shiv")
loadOrders("orders", "testname")
loadOrders("orders", "testNeg")
loadOrders <- function(tbl = table_orders, name){
db <- db_connect()
query <- sprintf("SELECT b.name, b.klid, b.q FROM
(SELECT name, klid, SUM(q) as q FROM %s
WHERE name = '%s'
GROUP BY klid) as b
WHERE b.q > 0
", tbl, name)
data <- dbGetQuery(db, query)
dbDisconnect(db)
return(data)
}
loadOrders("orders", "testNeg")
loadOrders("orders", "testname")
loadOrders("orders", "Jason")
loadOrders("orders", "Shiv")
loadAllOrders("orders")
loadAllOrders <- function(tbl = table_orders){
db <- db_connect()
query <- sprintf("SELECT b.klid, SUM(b.q) as q FROM
(SELECT a.name, a.klid, SUM(a.q) as q FROM %s AS a
GROUP BY a.name, a.klid) AS b
WHERE b.q > 0
GROUP BY b.klid", tbl)
data <- dbGetQuery(db, query)
dbDisconnect(db)
return(data)
}
loadAllOrders("orders")
table_orders
runApp()
runApp()
get_sml <- function(){
ordercsv <- loadAllOrders()
#ordercsv <- get_csvs(response_order)
ordercsv <- mutate_at(ordercsv, vars(q), as.integer)
tmp <- dplyr::transmute(select(left_join(group_by(ordercsv, klid) %>%
summarise(q = sum(q)),
priceList, by = "klid"),
klid, klname, q, mediumqty,largeqty,
largeprice, mediumprice,smallprice),
klid = klid,
klname = klname,
pricebreak = get_pricebreak_vec(q, mediumqty, largeqty),
price = ((q >= largeqty) * largeprice +
(q < largeqty & q >= mediumqty) * mediumprice +
(q < mediumqty) * smallprice)
)
return(tmp)
}
get_sml()
get_individual_order <- function(name){
tbl <- loadOrders(name = name)
tbl <- dplyr::mutate(left_join(tbl,
get_sml(), by = "klid"),
total = q * price,
ship = q * price * ship_est,
sgd = q * price * (1 + ship_est) * USDSGD) %>%
relocate(klname, .after = sgd)
return(tbl)
}
get_individual_order("Jason")
runApp()
#input fields to extract user input
fields_user <- c("name", "paynow")
sapply(fields_user, function(x) paste("basicinfo-", x, sep = ""))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dbDisconnect(db)
db <- db_connect()
#create users tbl
query_users <- "CREATE TABLE users
(
id INT AUTO_INCREMENT PRIMARY KEY,
ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
uname varchar(90) NOT NULL,
paynow INT NOT NULL
)
"
#create orders tbl
query_orders <- "CREATE TABLE orders
(
id INT AUTO_INCREMENT PRIMARY KEY,
ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
name varchar(90) NOT NULL,
klid varchar(10) NOT NULL,
q INT NOT NULL
)
"
dbGetQuery(db, query_users)
dbGetQuery(db, query_orders)
dbDisconnect(db)
runApp()
db <- db_connect()
#drop tables
drop_users <- "DROP TABLE users"
drop_orders <- "DROP TABLE orders"
#create users tbl
create_users <- "CREATE TABLE users
(
id INT AUTO_INCREMENT PRIMARY KEY,
ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
uname varchar(90) NOT NULL,
paynow INT NOT NULL
)
"
#create orders tbl
create_orders <- "CREATE TABLE orders
(
id INT AUTO_INCREMENT PRIMARY KEY,
ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
name varchar(90) NOT NULL,
klid varchar(10) NOT NULL,
q INT NOT NULL
)
"
dbGetQuery(db, drop_users)
dbGetQuery(db, drop_orders)
dbGetQuery(db, create_users)
dbGetQuery(db, create_orders)
dbDisconnect(db)
